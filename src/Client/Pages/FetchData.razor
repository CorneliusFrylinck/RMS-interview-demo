@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CanidateApp.Shared
@attribute [Authorize]
@inject HttpClient Http

@inject IHttpClientFactory factory

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}



@if (forecasts2 == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts2)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>


    <UseGetSites Strategy="ExecutionStrategy.CacheAndNetwork" Context="result">
        <ChildContent>
            @foreach (var s in result.Sites)
            {
                <MudText>@s.Name</MudText>
            }
        </ChildContent>
    </UseGetSites>


}


@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? forecasts2;

    protected override async Task OnInitializedAsync()
    {

        var c = factory.CreateClient("WebApi");

        var d = await c.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        forecasts2 = d;

        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ee)
        {

        }
    }
}
